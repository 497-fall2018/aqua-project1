{"version":3,"sources":["logo.svg","components/TodoList.js","components/GlobalTimer.js","components/TodoItems.js","components/ListContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoList","this","props","inputElement","current","focus","react_default","a","createElement","className","onSubmit","addItem","placeholder","ref","value","currentItem","text","onChange","handleInput","type","Component","GlobalTimer","TodoItems","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createTasks","item","onClick","finishTask","deleteItem","state","isDone","bind","assertThisInitialized","e","target","style","textDecoration","color","setState","listItems","localStorage","getItem","JSON","parse","entries","map","ListContainer","showTodoList","addingItem","console","log","selectedItem","components_TodoItems","components_TodoList","App","preventDefault","newItem","items","toConsumableArray","concat","currItems","push","setItem","stringify","key","itemRef","indexOf","loc","splice","filteredItems","React","createRef","components_GlobalTimer","components_ListContainer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.55dc98c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nclass TodoList extends Component {\r\n  componentDidUpdate() {\r\n    this.props.inputElement.current.focus()\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"todoListMain\">\r\n          <form className=\"header\" onSubmit={this.props.addItem}>\r\n            <input\r\n              className=\"todo-input\"\r\n              placeholder=\"Task\"\r\n              ref={this.props.inputElement}\r\n              value={this.props.currentItem.text}\r\n              onChange={this.props.handleInput} />\r\n            <button className=\"todo-submit\" type=\"submit\"> add it. </button>\r\n          </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList\r\n","import React, { Component } from 'react';\r\nimport \"../App.css\";\r\n\r\n\r\nclass GlobalTimer extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"globaltimer-container\">\r\n                <div className=\"globaltimer-header\">TIME TO COMPLETE:</div>\r\n                <div className=\"globaltimer-time\">3:30:00</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GlobalTimer;","import React, { Component } from 'react';\r\nimport \"../App.css\";\r\nclass TodoItems extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isDone: false,\r\n    }\r\n    this.finishTask = this.finishTask.bind(this);\r\n  }\r\n\r\n  finishTask(e) {\r\n    if (e.target.style.textDecoration === 'line-through'){\r\n      e.target.style.color = 'black';\r\n      e.target.style.textDecoration = 'none';\r\n      this.setState({isDone: false})\r\n    }\r\n    else{\r\n      e.target.style.color = 'red';\r\n      e.target.style.textDecoration = 'line-through';\r\n      this.setState({isDone: true})\r\n    }\r\n\r\n  }\r\n\r\n  createTasks= item => {\r\n    return (\r\n      <div>\r\n        <li\r\n          className={`todo-list-item`}\r\n          onClick={this.finishTask}>\r\n          {item}\r\n          <button className=\"todo-list-item-deletebutton\"onClick={() => this.props.deleteItem(item)}></button>\r\n\r\n        </li>\r\n      </div>\r\n      )\r\n  }\r\n\r\n  render(){\r\n\r\n    let todoEntries;\r\n\r\n    if (localStorage.getItem(\"items\")) {\r\n       todoEntries = JSON.parse(localStorage.getItem(\"items\"))\r\n    }\r\n    else {\r\n      todoEntries = this.props.entries;\r\n    }\r\n\r\n    // const todoEntries = this.props.entries;\r\n    const listItems = todoEntries.map(this.createTasks)\r\n\r\n    return <ul className = \"theList\">{listItems}</ul>\r\n  }\r\n}\r\n\r\nexport default TodoItems;\r\n","import React, { Component } from 'react';\r\nimport \"../App.css\";\r\n\r\nimport TodoItems from './TodoItems'\r\nimport TodoList from './TodoList'\r\n\r\nclass ListContainer extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state={\r\n          selectedItem: null,\r\n          addingItem: true,\r\n        }\r\n      }\r\n\r\n    showTodoList= () => {\r\n        this.setState({\r\n            addingItem: !this.state.addingItem,\r\n        })\r\n        console.log(this.state.addingItem)\r\n    }\r\n\r\n    render(){\r\n        if (this.state.addingItem){\r\n            return(\r\n                <div className=\"listcontainer-container\">\r\n                    <TodoItems \r\n                        entries={this.props.entries}\r\n                        deleteItem={this.props.deleteItem}/>\r\n                    <TodoList\r\n                        addItem={this.props.addItem}\r\n                        inputElement={this.props.inputElement}\r\n                        handleInput={this.props.handleInput}\r\n                        currentItem={this.props.currentItem}/>\r\n                    <button onClick={this.showTodoList} className=\"listcontainer-addbutton\">></button>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else\r\n        {\r\n            return(\r\n                <div className=\"listcontainer-container\">\r\n                    <TodoItems \r\n                        entries={this.props.entries}\r\n                        deleteItem={this.props.deleteItem}/>\r\n                    <button onClick={this.showTodoList} className=\"listcontainer-addbutton\">+</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ListContainer;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport TodoList from './components/TodoList';\r\nimport GlobalTimer from './components/GlobalTimer.js';\r\nimport ListContainer from './components/ListContainer.js';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state={\r\n      items: [],\r\n      currentItem: '',\r\n    }\r\n  }\r\nhandleInput = e => {\r\n  const currentItem = e.target.value;\r\n  this.setState({\r\n    currentItem,\r\n  })\r\n}\r\naddItem = e => {\r\n  e.preventDefault();\r\n  const newItem = this.state.currentItem;\r\n  if (newItem.text !=='') {\r\n    console.log(newItem)\r\n    \r\n    let items = [...this.state.items, newItem];\r\n    console.log(items)\r\n    if (localStorage.getItem(\"items\")){\r\n      let currItems = JSON.parse(localStorage.getItem(\"items\"));\r\n      currItems.push(newItem)\r\n      localStorage.setItem(\"items\", JSON.stringify(currItems))\r\n      // let storedItems = localStorage[\"items\"];\r\n      // console.log(items);\r\n      // let newPush = JSON.parse(storedItems).push(newItem.text)\r\n      // console.log(newPush)\r\n      // localStorage[\"items\"] = JSON.stringify(newPush)\r\n    }\r\n    else{\r\n \r\n      localStorage.setItem(\"items\", JSON.stringify(items));\r\n    }\r\n    this.setState({\r\n      items: items,\r\n      currentItem: { text: '', key: ''},\r\n    })\r\n  }\r\n}\r\ndeleteItem = item => {\r\n\r\n  let itemRef = this.state.items.indexOf(item)\r\n  let loc = JSON.parse(localStorage.getItem(\"items\"))\r\n  loc.splice(itemRef, 1);\r\n  localStorage.setItem(\"items\", JSON.stringify(loc))\r\n  const filteredItems = this.state.items.splice(itemRef, 1)\r\n  console.log(filteredItems)\r\n  \r\n  // this.state.items.filter(item=> {\r\n  //   return item.key !== key\r\n  // })\r\n  this.setState({\r\n    items: filteredItems,\r\n  })\r\n}\r\ninputElement = React.createRef();\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <GlobalTimer />\r\n        <ListContainer \r\n          entries={this.state.items}\r\n          deleteItem={this.deleteItem}\r\n          addItem={this.addItem}\r\n          inputElement={this.inputElement}\r\n          handleInput={this.handleInput}\r\n          currentItem={this.state.currentItem}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}