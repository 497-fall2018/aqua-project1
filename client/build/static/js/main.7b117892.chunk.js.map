{"version":3,"sources":["logo.svg","components/TodoList.js","components/TodoItems.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoList","this","props","inputElement","current","focus","react_default","a","createElement","className","onSubmit","addItem","placeholder","ref","value","currentItem","text","onChange","handleInput","type","Component","TodoItems","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createTasks","item","onClick","finishTask","deleteItem","state","isDone","bind","assertThisInitialized","e","target","style","textDecoration","color","setState","listItems","localStorage","getItem","JSON","parse","entries","map","App","preventDefault","newItem","console","log","items","toConsumableArray","concat","currItems","push","setItem","stringify","key","itemRef","indexOf","loc","splice","filteredItems","React","createRef","components_TodoList","components_TodoItems","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7b117892.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport '../App.css';\n\nclass TodoList extends Component {\n  componentDidUpdate() {\n    this.props.inputElement.current.focus()\n  }\n  render(){\n    return(\n      <div className=\"todoListMain\">\n          <form className=\"header\" onSubmit={this.props.addItem}>\n            <input\n              className=\"todo-input\"\n              placeholder=\"Task\"\n              ref={this.props.inputElement}\n              value={this.props.currentItem.text}\n              onChange={this.props.handleInput} />\n            <button className=\"todo-submit\" type=\"submit\"> add it. </button>\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default TodoList\n","import React, { Component } from 'react';\nimport \"../App.css\";\nclass TodoItems extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      isDone: false,\n    }\n    this.finishTask = this.finishTask.bind(this);\n  }\n\n  finishTask(e) {\n    if (e.target.style.textDecoration === 'line-through'){\n      e.target.style.color = 'black';\n      e.target.style.textDecoration = 'none';\n      this.setState({isDone: false})\n    }\n    else{\n      e.target.style.color = 'green';\n      e.target.style.textDecoration = 'line-through';\n      this.setState({isDone: true})\n    }\n\n  }\n\n  createTasks= item => {\n    return (\n      <div>\n        <li\n          className={`todo-list-item`}\n          onClick={this.finishTask}>\n          {item}\n          <button onClick={() => this.props.deleteItem(item)}>x</button>\n\n        </li>\n      </div>\n      )\n  }\n\n  render(){\n\n    let todoEntries;\n\n    if (localStorage.getItem(\"items\")) {\n       todoEntries = JSON.parse(localStorage.getItem(\"items\"))\n    }\n    else {\n      todoEntries = this.props.entries;\n    }\n\n    // const todoEntries = this.props.entries;\n    const listItems = todoEntries.map(this.createTasks)\n\n    return <ul className = \"theList\">{listItems}</ul>\n  }\n}\n\nexport default TodoItems;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport TodoList from './components/TodoList';\nimport TodoItems from './components/TodoItems';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state={\n      items: [],\n      currentItem: '',\n    }\n  }\nhandleInput = e => {\n  const currentItem = e.target.value;\n  this.setState({\n    currentItem,\n  })\n}\naddItem = e => {\n  e.preventDefault();\n  const newItem = this.state.currentItem;\n  if (newItem.text !=='') {\n    console.log(newItem)\n    \n    let items = [...this.state.items, newItem];\n    console.log(items)\n    if (localStorage.getItem(\"items\")){\n      let currItems = JSON.parse(localStorage.getItem(\"items\"));\n      currItems.push(newItem)\n      localStorage.setItem(\"items\", JSON.stringify(currItems))\n      // let storedItems = localStorage[\"items\"];\n      // console.log(items);\n      // let newPush = JSON.parse(storedItems).push(newItem.text)\n      // console.log(newPush)\n      // localStorage[\"items\"] = JSON.stringify(newPush)\n    }\n    else{\n \n      localStorage.setItem(\"items\", JSON.stringify(items));\n    }\n    this.setState({\n      items: items,\n      currentItem: { text: '', key: ''},\n    })\n  }\n}\ndeleteItem = item => {\n\n  let itemRef = this.state.items.indexOf(item)\n  let loc = JSON.parse(localStorage.getItem(\"items\"))\n  loc.splice(itemRef, 1);\n  localStorage.setItem(\"items\", JSON.stringify(loc))\n  const filteredItems = this.state.items.splice(itemRef, 1)\n  console.log(filteredItems)\n  \n  // this.state.items.filter(item=> {\n  //   return item.key !== key\n  // })\n  this.setState({\n    items: filteredItems,\n  })\n}\ninputElement = React.createRef();\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList\n          addItem={this.addItem}\n          inputElement={this.inputElement}\n          handleInput={this.handleInput}\n          currentItem={this.state.currentItem}/>\n        <TodoItems\n          entries={this.state.items}\n          deleteItem={this.deleteItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}